# -*- coding: utf-8 -*-
"""Decorators - intro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jLUaabe68P6SIeskAiz9yI5TkUOzfMOW

## Function is an object
"""

def greet():
    """
    Function that greets everyone
    :return: None
    """
    print("Hello All!")

"""### Calling a function"""

# Calling a function
greet()

"""### Accessing a function object"""

print(f"Type of greet is: {type(greet)}")

print(f"Type of greet is: {type(greet)}\n\n"
      f"Some attributes of greet:\n\n"
      f"__name__ attribute:\n {greet.__name__}\n\n"
      f"__doc__ attribute:\n {greet.__doc__}\n\n"
      f"__code__ attribute:\n {greet.__code__}\n\n")

"""### Function can be passed as parameter (like any other object)"""

"""
Defining a function that receives another function as parameter and calls it
"""
def wrapper(other_function):
    print(f"Running function {other_function} received as param...\n")
    other_function()

# Call wrapper() that will in turn call function passed as parameter
wrapper(greet)

"""## Function can create another function and return it"""

def create_quote():
    print("Creating a function that will print a quote...")

    # defining a new function inside a function
    def display_quote():
        print("\n*********************************************\n"
              "Quote by John Quincy Adams, 6th U.S. President:\n"
              "Try and fail, but don't fail to try\n"
              "*********************************************\n")

    return display_quote

# call create_function() and look at it's return value
created_function = create_quote()
print(f"\nObject received from create_function(): {type(created_function)}")

# now let's call our created function
created_function()

"""## Writing our first decorator
Decorator is a function that receives other function as parameter.

Then it wraps the original function in a new "wrapper" function that changes the behaviour of the original function a little bit.

The wrapper function created inside our decorator is the returned.
"""

def greeting_decorator(other_func):

    def greeting_func():
        print(f"\n---------------------------------------\n"
              f"Hello!\nWelcome to function {other_func.__name__}!\n"
              f"---------------------------------------\n")
        # Note we call the function we received as parameter
        # inside our inner function
        other_func()
        print(f"\n---------------------------------------\n"
              f"Good-bye!\nThanks for using function {other_func.__name__}!"
              f"\n---------------------------------------\n")

    return greeting_func